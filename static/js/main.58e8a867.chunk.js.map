{"version":3,"sources":["_services/_checking/checkServices.js","_helps/authHeader.js","_components/FullPageLoader/loading.gif","_components/FullPageLoader/FullPageLoader.js","App.js","reportWebVitals.js","index.js"],"names":["checkServices","check","number","Axios","get","headers","then","response","FullPageLoader","this","props","loading","className","style","position","src","LoaderGif","margin","height","width","alt","Component","useStyles","makeStyles","theme","conatiner","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","useState","scanResultWebCam","scan","setscan","result","setresult","setloading","classes","handleScan","useRef","decision","Container","Card","CardContent","Button","variant","onClick","bind","Grid","container","spacing","item","xl","lg","md","sm","xs","delay","onError","error","console","log","onScan","ret","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58e8a867.chunk.js","sourcesContent":["import Axios from \"axios\";\nimport { apiUrl} from \"../../_helps\";\nexport const checkServices = {\n    check\n}\nfunction check(number) {\n    const requestOptions = {\n        headers: {\n            'Access-Control-Allow-Origin':'*'\n        }\n    };\n    return Axios.get(`${apiUrl()}/check/${number}`,requestOptions)\n        .then((response) => {\n            return response;\n        });\n}","export function apiUrl() {\r\n    // return \"http://localhost:8081\";\r\n    return \"https://concert-chandelier.herokuapp.com\";\r\n}","export default __webpack_public_path__ + \"static/media/loading.149a7823.gif\";","import React, { Component } from \"react\";\nimport LoaderGif from \"./loading.gif\";\n//import CongoEmblem from \"../../components/assets/img/congo_emblem.svg\";\n//import JavLogo from \"../../assets/img/JavLogo.png\";\nimport \"./Loader.css\";\nclass FullPageLoader extends Component {\n  // state = {};\n  render() {\n    const { loading } = this.props;\n    if (!loading) return null;\n    return (\n      <div className=\"loader-container\">\n        <div className=\"loader\">\n          <div style={{ position: 'relative', }}>\n            {/* <img src={JavLogo} style={{ position: 'absolute',margin: \"auto\", height: 110, width: 'auto', top:20, left:23 }} alt=\"emblem drc\" /> */}\n            <img src={LoaderGif} style={{ margin: \"auto\",height:140, width:'auto' }} alt=\"Loading...\" />\n            \n          </div>\n          <p className=\"text-right\">Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default FullPageLoader;\n","// import logo from './logo.svg';\n// import './App.css';\nimport React, {useState, useRef} from 'react';\nimport {Container, Card, CardContent, makeStyles, Grid, Button} from '@material-ui/core';\nimport QRCode from 'qrcode';\nimport QrReader from 'react-qr-reader';\nimport {checkServices} from \"./_services\";\nimport FullPageLoader from \"./_components/FullPageLoader/FullPageLoader\";\nfunction App() {\n  const [text, setText] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [scanResultFile, setScanResultFile] = useState('');\n  const [scanResultWebCam, setScanResultWebCam] =  useState('');\n  const [scan, setscan] = useState(false);\n  const [result, setresult] = useState(null);\n  const [loading, setloading] = useState(false);\n  const classes = useStyles();\n  const qrRef = useRef(null);\n\n\n  const generateQrCode = async () => {\n    try {\n          const response = await QRCode.toDataURL(text);\n          setImageUrl(response);\n    }catch (error) {\n      console.log(error);\n    }\n  }\n  const handleErrorFile = (error) => {\n    console.log(error);\n  }\n  const handleScanFile = (result) => {\n      if (result) {\n          // setScanResultFile(result);\n          checkServices.check(result).then(ret=>{\n            console.log(\"Resultat\",ret);\n          }).catch(error=>{\n            console.log(\"Erreur : \",error);\n          })\n      }\n  }\n  const onScanFile = () => {\n    qrRef.current.openImageDialog();\n  }\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  }\n  const handleScanWebCam = (result) => {\n    // if (result){\n    //     setScanResultWebCam(result);\n    // }\n    if (result) {\n      setloading(true);\n      checkServices.check(result).then(ret=>{\n        setscan(false);\n        setresult(ret.data);\n        setloading(false);\n      }).catch(error=>{\n        setloading(false);\n        console.log(\"Erreur : \",error);\n      })\n  }\n   }\n  const  handleScan = (decision)=>{\n    setscan(decision);\n  }\n  return (\n    <Container className={classes.conatiner}>\n          <Card>\n              <h2 className={classes.title}>Generate Download & Scan QR Code with React js</h2>\n              <CardContent>\n              <Button className={classes.btn} variant=\"contained\" \n                            color=\"primary\" onClick={handleScan.bind(this,true)}>Scan Now</Button>\n                  <Grid container spacing={2}>\n                      {/* <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                          <TextField label=\"Enter Text Here\" onChange={(e) => setText(e.target.value)}/>\n                          <Button className={classes.btn} variant=\"contained\" \n                            color=\"primary\" onClick={() => generateQrCode()}>Generate</Button>\n                            <br/>\n                            <br/>\n                            <br/>\n                            {imageUrl ? (\n                              <a href={imageUrl} download>\n                                  <img src={imageUrl} alt=\"img\"/>\n                              </a>) : null}\n                      </Grid> */}\n                      {/* <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                        <Button className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\n                        <QrReader\n                          ref={qrRef}\n                          delay={300}\n                          style={{width: '100%'}}\n                          onError={handleErrorFile}\n                          onScan={handleScanFile}\n                          legacyMode\n                        />\n                        <h3>Scanned Code: {scanResultFile}</h3>\n                      </Grid> */}\n                      {result===true ? (\n                        <h1>Good </h1>\n                      ) : (\n\n                        <h1>Bad </h1>\n                      )}\n\n                      {scan && (\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                         <h3>Qr Code Scan by Web Cam</h3>\n                         <QrReader\n                         delay={300}\n                         style={{width: '100%'}}\n                         onError={handleErrorWebCam}\n                         onScan={handleScanWebCam}\n                         />\n                         <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\n                         <Button className={classes.btn} variant=\"contained\" \n                            color=\"danger\" onClick={handleScan.bind(this,false)}>Stop scanning</Button>\n                      </Grid>\n                      )}\n\n\n                  </Grid>\n              </CardContent>\n          </Card>\n          <FullPageLoader loading={loading}/>\n    </Container>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  conatiner: {\n    marginTop: 10\n  },\n  title: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems:  'center',\n    background: '#3f51b5',\n    color: '#fff',\n    padding: 20\n  },\n  btn : {\n    marginTop: 10,\n    marginBottom: 20\n  }\n}));\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}