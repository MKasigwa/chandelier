{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","conatiner","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","useState","scanResultWebCam","setScanResultWebCam","scan","setscan","classes","handleScan","useRef","decision","Container","className","Card","CardContent","Button","variant","onClick","bind","this","Grid","container","spacing","item","xl","lg","md","sm","xs","delay","style","width","onError","error","console","log","onScan","result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAmGA,IAAMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,UAAW,IAEbC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAa,SACbC,WAAY,UACZC,MAAO,OACPC,QAAS,IAEXC,IAAM,CACJR,UAAW,GACXS,aAAc,QAGHC,EA9Gf,WACE,MAAwBC,mBAAS,IAAjC,mBACA,GADA,UACgCA,mBAAS,KAAzC,mBACA,GADA,UAC4CA,mBAAS,KAArD,mBACA,GADA,UACiDA,mBAAS,KAA1D,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAwBF,oBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAUpB,IA+BTqB,GA9BOC,iBAAO,MA8BD,SAACC,GACnBJ,EAAQI,KAEV,OACE,cAACC,EAAA,EAAD,CAAWC,UAAWL,EAAQjB,UAA9B,SACM,eAACuB,EAAA,EAAD,WACI,oBAAID,UAAWL,EAAQf,MAAvB,4DACA,eAACsB,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAQH,UAAWL,EAAQR,IAAKiB,QAAQ,YAC1BnB,MAAM,UAAUoB,QAAST,EAAWU,KAAKC,MAAK,GAD5D,sBAEI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SAyBKjB,GACD,eAACe,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA5C,UACG,yDACA,cAAC,IAAD,CACAC,MAAO,IACPC,MAAO,CAACC,MAAO,QACfC,QAjDG,SAACC,GACzBC,QAAQC,IAAIF,IAiDSG,OA/CE,SAACC,GACpBA,GACAjC,EAAoBiC,MA+CH,0DAA6BlC,KAC7B,cAACY,EAAA,EAAD,CAAQH,UAAWL,EAAQR,IAAKiB,QAAQ,YACrCnB,MAAM,SAASoB,QAAST,EAAWU,KAAKC,MAAK,GADhD,yCC5EVmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58a5393c.chunk.js","sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\nimport React, {useState, useRef} from 'react';\nimport {Container, Card, CardContent, makeStyles, Grid, TextField, Button} from '@material-ui/core';\nimport QRCode from 'qrcode';\nimport QrReader from 'react-qr-reader';\nfunction App() {\n  const [text, setText] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [scanResultFile, setScanResultFile] = useState('');\n  const [scanResultWebCam, setScanResultWebCam] =  useState('');\n  const [scan, setscan] = useState(false);\n  const classes = useStyles();\n  const qrRef = useRef(null);\n\n\n  const generateQrCode = async () => {\n    try {\n          const response = await QRCode.toDataURL(text);\n          setImageUrl(response);\n    }catch (error) {\n      console.log(error);\n    }\n  }\n  const handleErrorFile = (error) => {\n    console.log(error);\n  }\n  const handleScanFile = (result) => {\n      if (result) {\n          setScanResultFile(result);\n      }\n  }\n  const onScanFile = () => {\n    qrRef.current.openImageDialog();\n  }\n  const handleErrorWebCam = (error) => {\n    console.log(error);\n  }\n  const handleScanWebCam = (result) => {\n    if (result){\n        setScanResultWebCam(result);\n    }\n   }\n  const  handleScan = (decision)=>{\n    setscan(decision);\n  }\n  return (\n    <Container className={classes.conatiner}>\n          <Card>\n              <h2 className={classes.title}>Generate Download & Scan QR Code with React js</h2>\n              <CardContent>\n              <Button className={classes.btn} variant=\"contained\" \n                            color=\"primary\" onClick={handleScan.bind(this,true)}>Scan Now</Button>\n                  <Grid container spacing={2}>\n                      {/* <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                          <TextField label=\"Enter Text Here\" onChange={(e) => setText(e.target.value)}/>\n                          <Button className={classes.btn} variant=\"contained\" \n                            color=\"primary\" onClick={() => generateQrCode()}>Generate</Button>\n                            <br/>\n                            <br/>\n                            <br/>\n                            {imageUrl ? (\n                              <a href={imageUrl} download>\n                                  <img src={imageUrl} alt=\"img\"/>\n                              </a>) : null}\n                      </Grid> */}\n                      {/* <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                        <Button className={classes.btn} variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\n                        <QrReader\n                          ref={qrRef}\n                          delay={300}\n                          style={{width: '100%'}}\n                          onError={handleErrorFile}\n                          onScan={handleScanFile}\n                          legacyMode\n                        />\n                        <h3>Scanned Code: {scanResultFile}</h3>\n                      </Grid> */}\n                      {scan && (\n                      <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n                         <h3>Qr Code Scan by Web Cam</h3>\n                         <QrReader\n                         delay={300}\n                         style={{width: '100%'}}\n                         onError={handleErrorWebCam}\n                         onScan={handleScanWebCam}\n                         />\n                         <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\n                         <Button className={classes.btn} variant=\"contained\" \n                            color=\"danger\" onClick={handleScan.bind(this,false)}>Stop scanning</Button>\n                      </Grid>\n                      )}\n                  </Grid>\n              </CardContent>\n          </Card>\n    </Container>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  conatiner: {\n    marginTop: 10\n  },\n  title: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems:  'center',\n    background: '#3f51b5',\n    color: '#fff',\n    padding: 20\n  },\n  btn : {\n    marginTop: 10,\n    marginBottom: 20\n  }\n}));\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}